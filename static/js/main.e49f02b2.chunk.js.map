{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","useState","clickNuevo","setClickNuevo","txtBtnNuevo","setTxtBtnNuevo","classBtnNuevo","setClassBtnNuevo","personas","setPersonas","nombreNuevo","setNombreNuevo","edadNuevo","setEdadNuevo","focusInputNuevo","setFocusInputNuevo","eliminarHandleClick","e","fetch","method","headers","Headers","body","JSON","stringify","id","parseInt","target","name","then","response","text","responseTxt","getPersonas","parse","reverse","handleNuevoInputChange","event","value","Fila","props","editando","setEditando","persona","nombre","setNombre","edad","setEdad","focusNombre","setFocusNombre","focusEdad","setFocusEdad","className","autoFocus","onChange","type","onClick","Nuevo","click","placeholder","useEffect","scope","map","index","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e49f02b2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState, useEffect } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n\n  const [clickNuevo, setClickNuevo] = useState(false);\n\n  const [txtBtnNuevo, setTxtBtnNuevo] = useState(\"Nuevo\");\n\n  const [classBtnNuevo, setClassBtnNuevo] = useState(\"nuevo btn btn-success\");\n\n  const [personas, setPersonas] = useState([]); \n\n  const [nombreNuevo, setNombreNuevo] = useState(\"\");\n\n  const [edadNuevo, setEdadNuevo] = useState(\"\");\n\n  const [focusInputNuevo, setFocusInputNuevo] = useState(\"nombreNuevo\");\n\n  useEffect(() => {\n\n    getPersonas()\n  \n  }, []);\n\n  function eliminarHandleClick(e){\n\n\n      fetch('https://crud-symfony-back.herokuapp.com/eliminarPersona',{\n        method: 'POST',\n        headers: new Headers({}),\n        body: JSON.stringify({id: parseInt(e.target.name)}),\n      })\n      .then(response => response.text())\n      .then((responseTxt)=> {\n\n        getPersonas()\n\n      })\n\n\n  }\n\n\n  function getPersonas(){\n\n    fetch(\"https://crud-symfony-back.herokuapp.com/getPersonas\",{})\n    .then(response => response.text())\n    .then((responseTxt)=> {\n\n      setPersonas(JSON.parse(responseTxt).reverse())\n\n    })\n\n  }\n\n  function nuevoHandleClick(e) {\n\n    if(clickNuevo){\n\n      fetch('https://crud-symfony-back.herokuapp.com/nuevaPersona',{\n        method: 'POST',\n        headers: new Headers({}),\n        body: JSON.stringify({nombre: nombreNuevo, edad: edadNuevo}),\n      })\n      .then(response => response.text())\n      .then((responseTxt)=> {\n\n        getPersonas()\n\n      })\n\n\n      setClickNuevo(false)\n\n      setTxtBtnNuevo(\"Nuevo\")\n\n      setClassBtnNuevo(\"nuevo btn btn-success\")\n\n    }else{\n\n      setClickNuevo(true)\n\n      setTxtBtnNuevo(\"Agregar\")\n\n      setClassBtnNuevo(\"nuevo btn btn-info\")\n\n    }\n\n  }\n\n  function handleNuevoInputChange(event){\n\n    if (event.target.name === \"nombreNuevo\") {\n\n      setFocusInputNuevo(\"nombreNuevo\")\n\n      setNombreNuevo(event.target.value)\n\n    } else {\n\n      setFocusInputNuevo(\"edadNuevo\")\n\n      setEdadNuevo(event.target.value)\n\n    }\n\n  }\n\n  function Fila(props){\n\n    const [editando, setEditando] = useState(false)\n\n    const [nombre, setNombre] = useState(props.persona.nombre)\n\n    const [edad, setEdad] = useState(props.persona.edad)\n\n    const [focusNombre, setFocusNombre] = useState(false)\n\n    const [focusEdad, setFocusEdad] = useState(false)\n\n    if(editando){\n\n\n      return(\n\n            <tr>\n              <th><div className=\"form-group\"><input \n              value={nombre}\n              autoFocus={focusNombre}\n              onChange={event => {\n\n                setFocusNombre(true)\n\n                setFocusEdad(false)\n\n                setNombre(event.target.value)\n\n              }}\n              className=\"form-control\" type=\"text\"/>\n\n              </div></th>\n\n              <th><div className=\"form-group\"><input \n              value={edad}\n              autoFocus={focusEdad}\n              onChange={event => {\n\n                setFocusEdad(true)\n\n                setFocusNombre(false)\n\n                setEdad(event.target.value)\n\n              }}\n              className=\"form-control\" type=\"text\"/>\n\n              </div></th>\n\n              <td>\n                \n                <button \n                onClick={()=>{\n\n                  setEditando(false)\n\n                  fetch('https://crud-symfony-back.herokuapp.com/editarPersona',{\n                    method: 'POST',\n                    headers: new Headers({}),\n                    body: JSON.stringify({id: props.persona.id, nombre: nombre, edad: edad}),\n                  })\n                  .then(response => response.text())\n                  .then((responseTxt)=> {\n\n                    getPersonas()\n\n                  })\n\n\n                }} \n                type=\"button\" className=\"btn btn-secondary\">Guardar</button>\n              \n              </td>\n              <td>\n\n                <button type=\"button\" className=\"btn btn-danger\">Eliminar</button>\n\n              </td>\n            </tr>\n\n      );\n    }else{\n\n      return (\n\n              <tr>\n                <th>{nombre}</th>\n                <td>{edad}</td>\n                <td>\n\n                  <button \n                  onClick={()=>{setEditando(true)}} \n                  type=\"button\" className=\"btn btn-warning\">Editar</button>\n\n                </td>\n                <td>\n\n                  <button \n                  onClick={eliminarHandleClick} \n                  name={props.persona.id}\n                  type=\"button\" className=\"btn btn-danger\">Eliminar</button>\n\n                </td>\n              </tr>\n\n      );\n\n    }\n\n\n    function editarHandleClick(e){\n\n\n      if(e.target.innerText==\"Editar\"){\n\n        e.target.className=\"btn btn-secondary\"\n\n        e.target.innerText=\"Guardar\"\n\n      }else{\n\n        e.target.className=\"btn btn-warning\"\n\n        e.target.innerText=\"Editar\"\n\n      }\n\n\n    }\n\n\n  }\n\n  function Nuevo(props){\n\n    const click = props.click;\n\n    if (click) {\n\n      let focusNombre = false\n\n      let focusEdad = false\n\n      if(focusInputNuevo==\"nombreNuevo\"){\n\n        focusNombre = true\n\n      }else{\n\n        focusEdad = true\n\n      }\n\n      return (\n\n            <div className=\"datosNuevos\">\n                  <input autoFocus={focusNombre} name=\"nombreNuevo\" \n                  onChange={event => handleNuevoInputChange(event)}\n                  value={nombreNuevo} placeholder=\"Nombre\" type=\"text\"/>\n                  <input autoFocus={focusEdad} name=\"edadNuevo\" \n                  onChange={event => handleNuevoInputChange(event)}\n                  value={edadNuevo} placeholder=\"Edad\" type=\"text\"/>\n            </div>\n\n            );\n\n    }\n\n    return <span />;\n\n  }\n\n\n  return (\n    <div className=\"App\">\n\n      <h1 className=\"titulo\">CRUD. React, Symfony, MySQL, Bootstrap.</h1>\n\n      <button onClick={nuevoHandleClick} type=\"button\" className={classBtnNuevo}>{txtBtnNuevo}</button>\n\n      <Nuevo click={clickNuevo} />\n\n      <table className=\"table table-dark table-striped table-bordered table-hover\">\n        <thead>\n          <tr>\n            <th scope=\"col\">Nombre</th>\n            <th scope=\"col\">Edad</th>\n            <th scope=\"col\"></th>\n            <th scope=\"col\"></th>\n          </tr>\n        </thead>\n        <tbody>\n\n          {personas.map((persona, index) => (\n\n            <Fila key={persona.id} persona={persona} />\n\n          ))}\n\n        </tbody>\n      </table>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}